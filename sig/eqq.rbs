# Pattern objects builder
module Eqq
  interface _Patternable
    def ===: (untyped object) -> bool
  end

  interface _ToSym
    def to_sym: -> Symbol
  end

  interface _Inspectable
    def inspect: () -> String
  end

  module Buildable
    type patternable_lambda = ^(untyped object) -> bool
    type product = patternable_lambda & _Inspectable

    # A private constant. Should not be used in your code.
    EQQ_BUILTIN_ANYTHING: product

    # A private constant. Should not be used in your code.
    EQQ_BUILTIN_NEVER: product

    # A private constant. Should not be used in your code.
    EQQ_BUILTIN_BOOLEAN: product

    # A private constant. Should not be used in your code.
    EQQ_BUILTIN_NIL: product

    # A private API. Should not be used in your code.
    def self.safe_inspect_for: (untyped object)-> String

    # A private API. Should not be used in your code.
    def self.define_inspect_on: (patternable_lambda product, name: String, arguments: Array[untyped])-> void

    # A private API. Should not be used in your code.
    def self.validate_patterns: (*untyped) -> void

    # Product returns `true` when matched even one pattern
    def OR: (_Patternable, _Patternable, *_Patternable) -> product

    # Product returns `true` when matched all patterns
    def AND: (_Patternable, _Patternable, *_Patternable) -> product

    # Product is an inverted `AND`
    def NAND: (_Patternable, _Patternable, *_Patternable) -> product

    # Product is an inverted `OR`
    def NOR: (_Patternable, _Patternable, *_Patternable) -> product

    # Product returns `true` when matched one of the pattern, when matched both returns `false`
    def XOR: (_Patternable, _Patternable) -> product

    # Product returns `true` when not matched the pattern
    def NOT: (_Patternable) -> product

    # Product returns `true` when matched with `#==`
    def EQ: (untyped object) -> product

    # Product returns `true` when matched with `#equal?`
    def SAME: (untyped object) -> product

    # Product returns `true` when it has all of the methods (checked with `respond_to?`)
    def CAN: (_ToSym, *_ToSym) -> product

    # Product returns `true` when the pattern raises the exception
    def RESCUE: (Module, _Patternable) -> product

    # Product returns `true` when all patterns did not raise any exception
    def QUIET: (_Patternable, *_Patternable) -> product

    # Basically provided for Enumerable
    def SEND: (Symbol | String name, _Patternable) -> product

    # Product returns `true`, always `true`
    def ANYTHING: () -> product

    # Product returns `false`, always `false`
    def NEVER: () -> product

    # Product returns `true` when matched to `true` or `false`
    def BOOLEAN: () -> product

    # Product returns `true` when matched to `nil` (Not consider `nil?`)
    def NIL: () -> product
  end

  extend Buildable

  # Base error of this library
  class Error < StandardError
  end

  # Raised when found some products are invalid as a pattern object
  class InvalidProductError < Error
  end

  # A private API. Should not be used in your code.
  class DSLScope
    include Buildable
  end

  VERSION: String

  # Returns `true` when given object has patternable signature
  def self.pattern?: (untyped object) -> bool

  # Returns `true` when given object has correct signature as a product of builders
  # Basically this is a private API. Should not be used in your code.
  def self.satisfy?: (untyped object) -> bool

  # In the block scope, all builder methods can be used without receiver
  def self.build:  { () -> _Patternable } -> _Patternable
end
